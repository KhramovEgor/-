# Generated from MyLanguage.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,31,180,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
        1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,4,10,113,8,
        10,11,10,12,10,114,1,11,4,11,118,8,11,11,11,12,11,119,1,11,1,11,
        4,11,124,8,11,11,11,12,11,125,1,12,4,12,129,8,12,11,12,12,12,130,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
        1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,
        1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,4,29,170,
        8,29,11,29,12,29,171,1,29,1,29,1,30,3,30,177,8,30,1,30,1,30,0,0,
        31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,1,0,3,1,0,48,57,2,0,
        65,90,97,122,3,0,9,10,13,13,32,32,185,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
        1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
        1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,1,63,1,0,0,0,3,66,
        1,0,0,0,5,71,1,0,0,0,7,75,1,0,0,0,9,81,1,0,0,0,11,88,1,0,0,0,13,
        90,1,0,0,0,15,95,1,0,0,0,17,99,1,0,0,0,19,105,1,0,0,0,21,112,1,0,
        0,0,23,117,1,0,0,0,25,128,1,0,0,0,27,132,1,0,0,0,29,134,1,0,0,0,
        31,136,1,0,0,0,33,138,1,0,0,0,35,140,1,0,0,0,37,142,1,0,0,0,39,144,
        1,0,0,0,41,146,1,0,0,0,43,148,1,0,0,0,45,150,1,0,0,0,47,152,1,0,
        0,0,49,154,1,0,0,0,51,157,1,0,0,0,53,160,1,0,0,0,55,162,1,0,0,0,
        57,165,1,0,0,0,59,169,1,0,0,0,61,176,1,0,0,0,63,64,5,105,0,0,64,
        65,5,102,0,0,65,2,1,0,0,0,66,67,5,101,0,0,67,68,5,108,0,0,68,69,
        5,115,0,0,69,70,5,101,0,0,70,4,1,0,0,0,71,72,5,102,0,0,72,73,5,111,
        0,0,73,74,5,114,0,0,74,6,1,0,0,0,75,76,5,119,0,0,76,77,5,104,0,0,
        77,78,5,105,0,0,78,79,5,108,0,0,79,80,5,101,0,0,80,8,1,0,0,0,81,
        82,5,114,0,0,82,83,5,101,0,0,83,84,5,116,0,0,84,85,5,117,0,0,85,
        86,5,114,0,0,86,87,5,110,0,0,87,10,1,0,0,0,88,89,5,44,0,0,89,12,
        1,0,0,0,90,91,5,118,0,0,91,92,5,111,0,0,92,93,5,105,0,0,93,94,5,
        100,0,0,94,14,1,0,0,0,95,96,5,105,0,0,96,97,5,110,0,0,97,98,5,116,
        0,0,98,16,1,0,0,0,99,100,5,102,0,0,100,101,5,108,0,0,101,102,5,111,
        0,0,102,103,5,97,0,0,103,104,5,116,0,0,104,18,1,0,0,0,105,106,5,
        112,0,0,106,107,5,114,0,0,107,108,5,105,0,0,108,109,5,110,0,0,109,
        110,5,116,0,0,110,20,1,0,0,0,111,113,7,0,0,0,112,111,1,0,0,0,113,
        114,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,22,1,0,0,0,116,118,
        7,0,0,0,117,116,1,0,0,0,118,119,1,0,0,0,119,117,1,0,0,0,119,120,
        1,0,0,0,120,121,1,0,0,0,121,123,5,46,0,0,122,124,7,0,0,0,123,122,
        1,0,0,0,124,125,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,24,1,
        0,0,0,127,129,7,1,0,0,128,127,1,0,0,0,129,130,1,0,0,0,130,128,1,
        0,0,0,130,131,1,0,0,0,131,26,1,0,0,0,132,133,5,43,0,0,133,28,1,0,
        0,0,134,135,5,45,0,0,135,30,1,0,0,0,136,137,5,42,0,0,137,32,1,0,
        0,0,138,139,5,47,0,0,139,34,1,0,0,0,140,141,5,61,0,0,141,36,1,0,
        0,0,142,143,5,40,0,0,143,38,1,0,0,0,144,145,5,41,0,0,145,40,1,0,
        0,0,146,147,5,123,0,0,147,42,1,0,0,0,148,149,5,125,0,0,149,44,1,
        0,0,0,150,151,5,62,0,0,151,46,1,0,0,0,152,153,5,60,0,0,153,48,1,
        0,0,0,154,155,5,61,0,0,155,156,5,61,0,0,156,50,1,0,0,0,157,158,5,
        33,0,0,158,159,5,61,0,0,159,52,1,0,0,0,160,161,5,59,0,0,161,54,1,
        0,0,0,162,163,3,27,13,0,163,164,3,27,13,0,164,56,1,0,0,0,165,166,
        3,29,14,0,166,167,3,29,14,0,167,58,1,0,0,0,168,170,7,2,0,0,169,168,
        1,0,0,0,170,171,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,173,
        1,0,0,0,173,174,6,29,0,0,174,60,1,0,0,0,175,177,5,13,0,0,176,175,
        1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,178,179,5,10,0,0,179,62,
        1,0,0,0,7,0,114,119,125,130,171,176,1,6,0,0
    ]

class MyLanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    INT = 11
    FLOAT = 12
    ID = 13
    PLUS = 14
    MINUS = 15
    MULT = 16
    DIV = 17
    EQ = 18
    LPAREN = 19
    RPAREN = 20
    RCORNER = 21
    LCORNER = 22
    GT = 23
    LT = 24
    EQ_EQ = 25
    NOT_EQ = 26
    END_STATE = 27
    INCREMENT = 28
    DECREMENT = 29
    WS = 30
    NEWLINE = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'while'", "'return'", "','", "'void'", 
            "'int'", "'float'", "'print'", "'+'", "'-'", "'*'", "'/'", "'='", 
            "'('", "')'", "'{'", "'}'", "'>'", "'<'", "'=='", "'!='", "';'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "ID", "PLUS", "MINUS", "MULT", "DIV", "EQ", 
            "LPAREN", "RPAREN", "RCORNER", "LCORNER", "GT", "LT", "EQ_EQ", 
            "NOT_EQ", "END_STATE", "INCREMENT", "DECREMENT", "WS", "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "INT", "FLOAT", "ID", "PLUS", 
                  "MINUS", "MULT", "DIV", "EQ", "LPAREN", "RPAREN", "RCORNER", 
                  "LCORNER", "GT", "LT", "EQ_EQ", "NOT_EQ", "END_STATE", 
                  "INCREMENT", "DECREMENT", "WS", "NEWLINE" ]

    grammarFileName = "MyLanguage.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


